# API Endpoints
llm_sherpa:
  api_url: http://localhost:5010/api/parseDocument?renderFormat=all

# OpenRouter Settings
openrouter:
  api_key: ""  # Add your OpenRouter API key here
  site_url: "http://localhost:3000"  # Optional: Your site URL
  site_name: "HybridRAG"  # Optional: Your site name
  model: "anthropic/claude-3-haiku-20240307"

# LLM Settings
llm:
  extraction_model: "anthropic/claude-3-haiku-20240307"  # For graph construction
  answer_model: "anthropic/claude-3-haiku-20240307"      # For answer generation

# Graph Settings
graph:
  storage:
    nodes_file: "data/graphs/nodes.csv"
    edges_file: "data/graphs/edges.csv"

# Model Settings
embedding:
  model_name: "thenlper/gte-small"
  max_length: 512
  cache_dir: "/fastembed_cache"

ranking:
  model_name: "cross-encoder/ms-marco-MiniLM-L-12-v2"
  cache_dir: "data/cache/reranker"

# Processing Settings
document:
  supported_formats:
    - pdf
    - docx
    - txt
  chunk_size: 512
  chunk_overlap: 50

# Cache Settings
cache:
  directory: "data/cache"
  ttl_hours: 24  # Time-to-live for cached documents
  max_size_gb: 10  # Maximum cache size in gigabytes

# Processing Optimization
processing:
  batch_size: 1000  # Number of chunks to process in parallel
  max_workers: null  # null means use CPU count
  use_process_pool: true  # Use ProcessPoolExecutor for CPU-intensive tasks
  use_thread_pool: true   # Use ThreadPoolExecutor for I/O-bound tasks

# Logging Settings
logging:
  log_level: "INFO"
  max_log_size: 5242880  # 5 MB
  backup_count: 3
  loggers:
    werkzeug:  # Flask's logger
      level: "WARNING"
      propagate: false
    flask:
      level: "INFO"
      propagate: false
    src.processing_layer.graph_constructor:  # Graph constructor logger
      level: "WARNING"
      propagate: true
    root:
      level: "INFO"
      handlers: ["file", "console"]
  handlers:
    file:
      class: "logging.handlers.RotatingFileHandler"
      formatter: "detailed"
      filename: "logs/app.log"
      maxBytes: 5242880
      backupCount: 3
    console:
      class: "logging.StreamHandler"
      formatter: "simple"
      level: "INFO"
  formatters:
    detailed:
      format: "%(asctime)s - %(levelname)s - %(message)s"
      datefmt: "%Y-%m-%d %H:%M:%S"
    simple:
      format: "%(levelname)s - %(message)s"
  filters:
    ignore_repeated:
      class: "logging.Filter"
      name: "repeated_filter"

# Timeout Settings
timeouts:
  document_processing: 20  # seconds
  query_processing: 30    # seconds
  embedding_generation: 60 # seconds

# Storage Paths
paths:
  embeddings: "data/embeddings"
  graphs: "data/graphs"
  raw_documents: "data/raw_documents"
  processed_chunks: "data/processed_chunks"
  models:
    gte_small: "models/gte_small"
    translation_ar_en: "models/opus-mt-ar-en"
    translation_en_ar: "models/opus-mt-en-ar"
    ranking: "models/ranking_model"